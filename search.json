[{"title":"随笔","url":"/2018/05/29/随笔/","content":"必须承认，我们没有办法孤立地活在这个世界上，势必要与他人形成链接。与我们形成强链接的，无外乎我们的父母，伴侣，朋友。我们与他们相处的时间很长，甚至一生的人，那怎么样才能够与他们一直保持良好的关系，然后持续地收获幸福呢？\n答案是共同成长。\n生活中，我们或多或少都有这样的感受，跟一个不在同一个频道或者同一个层次的人沟通，会发现非常困难。其实原因很简单，就是双方的认知水平不在同一个水平线上。跟父母相处，会有代沟；一起长大的朋友慢慢的就会走散一些人；跟自己的伴侣，有时候也会吵架闹不愉快。有的时候或许是我们走的太快，忘记了拉他们一把。"},{"title":"编码技巧","url":"/2018/05/28/编码技巧/","content":"# 三元操作符\n如果使用if ... else 语句 那么这是一个很好的节省代码的方式\n比如\n```javascript\nconst x = 20\nlet answer\nif (x > 10) {\n    answer = 'is greater'\n} else {\n    answer = 'is lesser'\n}\n```\n可以缩短为下面的一行代码\n```javascript\nconst answer = x > 10 ? 'is greater' : 'is lesser'\n```\n分配一个变量值到另一个变量值的时候，你可能想要确保变量不是null 、undefined 或 空。你可以写一个有多个if的条件语句\n```javascript\nif (value !== null || value !== undefined || value !== ''){\n    let newValue = value\n}\n```\n但是下面的书写方式更简洁\n```javascript\nconst newValue = value || 'new'\n```\n\n# js 的for循环\n如果你只想要用原生的javascript 普通的写法如下\n```javascript\nconst array = ['1','2','3']\nfor (let i = 0; i < array.length; i ++){\n    console.log(array[i])\n}\n```\n更简洁的写法\n```javascript\nconst array = ['1','2','3']\nfor (let index in array){\n    console.log(array[index])\n}\n```\n# Array.forEach()简写\n```javascript\nfunction logArrayElements(element, index, array){\n    console.log(\"a[\" + index + \"]=\" + element)\n}\n[2, 5, 9].forEach(logArrayElements)\n```\n# 十进制指数\n你可能看过这个 它本质上是一个写数字的奇特写法，就是一个数字后面有很多个0 例如1e7 本质相当于10000000 （1的后面有7个0）那么像这样的代码\n```javascript\nfor (let i = 0; i < 10000; i ++ ){\n    console.log(i)\n}\n```\n就可以简写成这个样子\n```javascript\nfor (let i = 0 ; i < 1e4; i ++){\n    console.log(i)\n}\n```\n# 箭头函数\n经典函数很容易读和写，但是确实有点冗长，特别是嵌套函数中调用其他函数时还会让你困惑\n```javascript\nfunction sayHello (name) {\n    console.log('Hello , ' + name)\n}\nsetTimeout(function () {\n    console.log('Loaded')\n}, 2000)\nlist.forEach(function(item) {\n    console.log(item)\n})\n```\n简写成如下\n```javascript\nsayHello = name => console.log('Hello, ' + name)\nsetTimeout(() => console.log('Loaded'), 2000)\nlist.forEach(item => console.log(item))\n```\n# 隐式返回\nreturn 是在函数中经常使用到的一个关键词，将返回函数的最终结果。箭头函数用一个语句将隐式的返回结果（为了省略return关键词 函数必须省略{}），如果返回一个多行语句（比如对象），有必要在函数体内使用（）代替{}。这样可以确保代码是否作为一个单独的语句返回。\n```javascript\nfunction calcCircunference (diameter) {\n    return Math.PI * diameter\n}\n```\n可以简写成下面这种\n```javascript\nconst calcCircunference = diameter => (\n    Math.PI * diameter\n)\n```\n# 参数默认值\n```javascript\nconst vaolume = (l, w = 3, h =4)  => (l * w * h)\n```\n# 模版字符串\n```javascript\n//  普通字符串\n`In JavaScript '\\n' is a line-feed`\n// 多行字符串\n`In JavaScript this is \nnot legal`\n//  字符串中嵌入变量\nlet name = 'Bob', time = 'today'\n`Hello ${name}, how are you ${time}`\n```"},{"title":"数据结构与算法（一）","url":"/2018/05/25/数据结构与算法（一）/","content":"\n### 数据结构（程序=数据结构 +  算法）\n数据结构就是关系， 就是数据元素相互直接存在的一种或多种特定关系的集合。\n传统上，我们把数据结构分为逻辑结构和物理结构。\n逻辑结构：是指数据对象中数据元素之间的相互关系，也是我们今后最需要关注和讨论的问题。\n物理结构：是指数据的逻辑结构在计算机中的存储形式。\n常用的数据结构有：\n\n\n数组（array）,队列（queue），堆（heap），栈（stack），链表（linked list），树（tree），图（graph）和散列表（hash）。\n\n栈（stack）：运算只在表的一端进行；\n队列（queue）：运算只在两端进行，只允许在一端进行插入操作，而在另一端进行删除操作的线性表。\n与栈相反，队列是一种先进先出（Frist in Frist out 　ＦＩＦＯ）的线性表。\n与栈相同的是，队列是一种重要的线性结构，实现一个队列同样需要顺序表或链表作为基础。\n四大结构\n### 集合结构\n![](../../css/images/24172510.png)\n###  线性结构\n![](../../css/images/24207018.png)\n### 树形结构 \n![](../../css/images/24233288.png)\n### 图形结构\n\n顺序存储和链式存储\n数据元素的存储结构形式有两种：顺序存储和链式存储。\n例如 我们编程语言的数组结构就是这样的\n\n 链式存储结构：是把数据元素存放在任意的存储单元里。这组存储单元可以是连续的，也可以是不连续的。\n链式存储结构\n\n \n线性表\n线性表：就好像是排队一样，具有线一样的性质的结构，它是由零个或多个数据元素组成的有限序列。\n若元素存在多个，则第一个元素无前驱，而最后一个元素无后继，其他的元素都有且只有一个前驱和后继。\n若将线性表记为（a1......ai-1,ai,ai+1,....an）,则表中ai-1领先于ai，ai领先于ai+1，称ai-1是ai的直接前驱元素，ai+1是ai的直接后继元素。\n\n\n数据类型\n数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。\n\n例如很多编程语言的整型，浮点型，字符型。。。这些指的就是数据类型。\n\n在计算机中，内存不是无限大的，如果要计算或者处理一些比较大的数时，需要开辟比较大的内存空间，于是就要对计算机进行数据类型的分类，分出多种数据类型来适合各种不同的计算条件差异。\n\n在c语言中 数据类型可以分为两类：\n原子类型：不可以再分解的基本类型，例如整型，浮点型，字符型等\n结构类型：由若干个类型的组合而成，是可以再分解的，例如整型数组是由若干整型数据组成的。\n\n\n算法\n \n算法是解决特定问题的求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或者多个操作。\n算法是具有五个基本特征：输入、输出、有穷性、确定性、和可行性。\n输出：算法至少有一个或者多给输出。\n有穷性：指算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。\n确定性：算法的每一个步骤都具有确定的含义，不会出现二义性。\n可行性：算法的每一步都必须是可行的，也就是说，每一步都能够通过执行有限次数完成。\n正确性：算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。\n高级语言编写的程序在计算机运时所消耗的时间取决于下列因素：\n\n1.算法采用的策略，方案。\n2.编译产生的代码质量。\n3.问题的输入模式。\n4.机器执行指令的速度。\n\n我们可以想象，线性表有两种物理存储结构：顺序存储结构和链式存储结构。\n\n线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。\n\n顺序存储结构封装需要三个属性：\n\n存储空间的起始位置：数组data，它的存储位置就是线性表存储空间的存储位置。\n线性表的最大存储容量：数组的长度MaxSize。\n线性表的当前长度：length。\n","tags":["life"]}]