[{"title":"计算机通识之网络协议（TCP）","url":"/2018/09/08/计算机通识之网络协议（TCP）/","content":"### TCP的三次握手\n![](../images/tcp.png)\n为了保证服务端能收接受到客户端的信息并能做出正确的应答而进行前两次(第一次和第二次)握手，为了保证客户端能够接收到服务端的信息并能做出正确的应答而进行后两次(第二次和第三次)握手\n\n知乎上的一个回答，从另外一个角度阐释：\n>在Google Groups的TopLanguage中看到一帖讨论TCP“三次握手”觉得很有意思。贴主提出“TCP建立连接为什么是三次握手？”的问题，在众多回复中，有一条回复写道：“这个问题的本质是, 信道不可靠, 但是通信双发需要就某个问题达成一致. 而要解决这个问题, 无论你在消息中包含什么信息, 三次通信是理论上的最小值. 所以三次握手不是TCP本身的要求, 而是为了满足\"在不可靠信道上可靠地传输信息\"这一需求所导致的. 请注意这里的本质需求,信道不可靠, 数据传输要可靠. 三次达到了, 那后面你想接着握手也好, 发数据也好, 跟进行可靠信息传输的需求就没关系了. 因此,如果信道是可靠的, 即无论什么时候发出消息, 对方一定能收到, 或者你不关心是否要保证对方收到你的消息, 那就能像UDP那样直接发送消息就可以了.”。这可视为对“三次握手”目的的另一种解答思路。\n\n### TCP 是什么？\nTCP（Transmission Control Protocol 传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议。\n\n#### 为什么要三次握手\n>在谢希仁著《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”。在另一部经典的《计算机网络》一书中讲“三次握手”的目的是为了解决“网络中存在延迟的重复分组”的问题。\n\n\b我们作为前端经常听说三次握手 殊不知还有四次挥手\n\nTCP连接的拆除需要发送四个包，因此成为四次挥手（four-way handshake）客户端或服务器均可主动发起挥手动作，在socket编程中，任何一方执行close()操作即可产生挥手操作。\n\n#### 为什么建立连接协议是三次握手，而关闭连接却是四次握手\n\n这是因为服务端的LISTEN状态下的SOCKET当收到SYN报文的连接请求后，它可以把ACK和SYN(ACK起应答作用，而SYN起同步作用)放在一个报文里来发送。但关闭连接时，当收到对方的FIN报文通知时，它仅仅表示对方没有数据发送给你了；但未必你所有的数据都全部发送给对方了，所以你可能未必会马上会关闭SOCKET,也即你可能还需要发送一些数据给对方之后，再发送FIN报文给对方来表示你同意现在可以关闭连接了，所以它这里的ACK报文和FIN报文多数情况下都是分开发送的。"},{"title":"计算机通识之网络协议（UDP）","url":"/2018/09/08/计算机通识之网络协议（UDP）/","content":"\n### UDP\nUDP是一个面向[报文](https://wiki.mbalib.com/wiki/%E6%8A%A5%E6%96%87)的协议，报文其实可以理解为一段段的数据，UDP只是报文的搬运工,不会对报文进行任何拆分和拼接操作。\n* 在发送端，应用层将数据传递给传输层的UDP协议，UDP只会给数据增加一个UDP头，标识一下是UDP协议，然后就传递给网络层了\n* 在接收端，网络层将数据传递给传输层，UDP只去除IP报文头就传递给应用层，不会任何拼接操作\n\n### 不可靠性\n* UDP是无连接的，也就是说通信不需要建立连接和断开连接\n* UDP是不可靠的，协议收到什么数据就传递什么数据，并且也不会备份数据，对方能不能收到是不关心的\n* UDP没有拥塞控制，一直会以恒定的速度发送数据。即使网络不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能导致丢包，但是优点也很明显，在某些实时性要求高的场景（直播、电话会议）就需要使用UDP而不是TCP\n\n### 高效性\n因为UDP没有TCP复杂，需要保证数据不丢失且有序到达。所以UDP的头部开销小，只有八字节，相比TCP的至少二十字节要少多了，在数据传输报文时是高效的。\n头部包含了以下几个数据\n- 两个十六位的端口号，分别为源端口（可选字段）和目标端口\n- 整个数据报文的长度\n- 整个数据报文的检验和（IPv4 可选 字段），该字段用于发现头部信息和数据中的错误\n\n### 传输方式\nUDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。\n\n"},{"title":"webpack配置之 服务和热更新","url":"/2018/08/24/webpack配置之-服务和热更新/","content":"执行 npm install webpack-dev-server --save-dev \n对webpack.config.js 进行配置 配置如下\n```javascript\ndevServer: {\n  // 设置基本目录结构\n  contentBase: path.resolve(__dirname, 'dist'),\n  // 服务器的IP地址，可以使用IP也可以使用localhost\n  host: 'localhost',\n  // 服务端压缩是否开启\n  compress: true,\n  // 配置服务端口号\n  port: 8088\n}\n```"},{"title":"webpack配置之 入口出口","url":"/2018/08/18/webpack配置之-入口出口/","content":"### 配置文件 webpack.config.js\nwebpack.config.js 就是webpack的配置文件 这个文件需要自己在项目根目录下手动创建。文件大致结构如下\n```javascript\nmodule.exports = {\n    // 入口文件的配置项 可以是单一的入口 也可以是多入口\n    entry: {},\n    //出口文件的配置项 支持多出口配置\n    output: {},\n    //模块： 例如css 图片如何转换 压缩\n    module: {},\n    //插件：用于生产模版和各项功能\n    plugins: [],\n    //配置webpack开发服务功能\n    devServer: {}\n}\n```\n### entry 选项（入口配置）\n这个选项就是我们配置我们要压缩的文件一般是 javascript 文件 （也可以是css） \nwebpack.config.js 中的entry 选项\n```javascript\n// 入口文件的配置项\nentry: {\n    entry: './src/index.js' // index.js 这里的路径可以随意指定\n}\n```\n### output选项 （出口配置）\n出口配置是用来告诉webpack最后打包文件的地址和文件名称的。一般都是打包到一个叫做 dist 文件的目录下 代码如下\n```javascript\n// 出口文件的配置\noutput: {\n    path: path.resolve(_dirname, 'dist'),\n    filename: 'bundle.js'\n}\n```\n### 多入口 多出口配置\n配置文件如下\n```javascript\nconst path = require('path')\nmodule.exports = {\n  entry: {\n    entry: './src/index.js',\n    entry2: './src/other.js'\n  },\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: '[name].js'\n  },\n  module: {},\n  plugins: [],\n  devServer: {}\n}\n```"},{"title":"编码技巧","url":"/2018/05/28/编码技巧/","content":"# 三元操作符\n如果使用if ... else 语句 那么这是一个很好的节省代码的方式\n比如\n```javascript\nconst x = 20\nlet answer\nif (x > 10) {\n    answer = 'is greater'\n} else {\n    answer = 'is lesser'\n}\n```\n可以缩短为下面的一行代码\n```javascript\nconst answer = x > 10 ? 'is greater' : 'is lesser'\n```\n分配一个变量值到另一个变量值的时候，你可能想要确保变量不是null 、undefined 或 空。你可以写一个有多个if的条件语句\n```javascript\nif (value !== null || value !== undefined || value !== ''){\n    let newValue = value\n}\n```\n但是下面的书写方式更简洁\n```javascript\nconst newValue = value || 'new'\n```\n\n# js 的for循环\n如果你只想要用原生的javascript 普通的写法如下\n```javascript\nconst array = ['1','2','3']\nfor (let i = 0; i < array.length; i ++){\n    console.log(array[i])\n}\n```\n更简洁的写法\n```javascript\nconst array = ['1','2','3']\nfor (let index in array){\n    console.log(array[index])\n}\n```\n# Array.forEach()简写\n```javascript\nfunction logArrayElements(element, index, array){\n    console.log(\"a[\" + index + \"]=\" + element)\n}\n[2, 5, 9].forEach(logArrayElements)\n```\n# 十进制指数\n你可能看过这个 它本质上是一个写数字的奇特写法，就是一个数字后面有很多个0 例如1e7 本质相当于10000000 （1的后面有7个0）那么像这样的代码\n```javascript\nfor (let i = 0; i < 10000; i ++ ){\n    console.log(i)\n}\n```\n就可以简写成这个样子\n```javascript\nfor (let i = 0 ; i < 1e4; i ++){\n    console.log(i)\n}\n```\n# 箭头函数\n经典函数很容易读和写，但是确实有点冗长，特别是嵌套函数中调用其他函数时还会让你困惑\n```javascript\nfunction sayHello (name) {\n    console.log('Hello , ' + name)\n}\nsetTimeout(function () {\n    console.log('Loaded')\n}, 2000)\nlist.forEach(function(item) {\n    console.log(item)\n})\n```\n简写成如下\n```javascript\nsayHello = name => console.log('Hello, ' + name)\nsetTimeout(() => console.log('Loaded'), 2000)\nlist.forEach(item => console.log(item))\n```\n# 隐式返回\nreturn 是在函数中经常使用到的一个关键词，将返回函数的最终结果。箭头函数用一个语句将隐式的返回结果（为了省略return关键词 函数必须省略{}），如果返回一个多行语句（比如对象），有必要在函数体内使用（）代替{}。这样可以确保代码是否作为一个单独的语句返回。\n```javascript\nfunction calcCircunference (diameter) {\n    return Math.PI * diameter\n}\n```\n可以简写成下面这种\n```javascript\nconst calcCircunference = diameter => (\n    Math.PI * diameter\n)\n```\n# 参数默认值\n```javascript\nconst vaolume = (l, w = 3, h =4)  => (l * w * h)\n```\n# 模版字符串\n```javascript\n//  普通字符串\n`In JavaScript '\\n' is a line-feed`\n// 多行字符串\n`In JavaScript this is \nnot legal`\n//  字符串中嵌入变量\nlet name = 'Bob', time = 'today'\n`Hello ${name}, how are you ${time}`\n```"},{"title":"数据结构与算法（一）","url":"/2018/05/25/数据结构与算法（一）/","content":"\n### 数据结构（程序=数据结构 +  算法）\n数据结构就是关系， 就是数据元素相互直接存在的一种或多种特定关系的集合。\n传统上，我们把数据结构分为逻辑结构和物理结构。\n逻辑结构：是指数据对象中数据元素之间的相互关系，也是我们今后最需要关注和讨论的问题。\n物理结构：是指数据的逻辑结构在计算机中的存储形式。\n常用的数据结构有：\n\n\n数组（array）,队列（queue），堆（heap），栈（stack），链表（linked list），树（tree），图（graph）和散列表（hash）。\n\n栈（stack）：运算只在表的一端进行；\n队列（queue）：运算只在两端进行，只允许在一端进行插入操作，而在另一端进行删除操作的线性表。\n与栈相反，队列是一种先进先出（Frist in Frist out 　ＦＩＦＯ）的线性表。\n与栈相同的是，队列是一种重要的线性结构，实现一个队列同样需要顺序表或链表作为基础。\n四大结构\n### 集合结构\n![](../images/24172510.png)\n###  线性结构\n![](../images/24207018.png)\n### 树形结构 \n![](../images/24233288.png)\n### 图形结构\n\n顺序存储和链式存储\n数据元素的存储结构形式有两种：顺序存储和链式存储。\n例如 我们编程语言的数组结构就是这样的\n\n 链式存储结构：是把数据元素存放在任意的存储单元里。这组存储单元可以是连续的，也可以是不连续的。\n链式存储结构\n\n \n线性表\n线性表：就好像是排队一样，具有线一样的性质的结构，它是由零个或多个数据元素组成的有限序列。\n若元素存在多个，则第一个元素无前驱，而最后一个元素无后继，其他的元素都有且只有一个前驱和后继。\n若将线性表记为（a1......ai-1,ai,ai+1,....an）,则表中ai-1领先于ai，ai领先于ai+1，称ai-1是ai的直接前驱元素，ai+1是ai的直接后继元素。\n\n\n数据类型\n数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。\n\n例如很多编程语言的整型，浮点型，字符型。。。这些指的就是数据类型。\n\n在计算机中，内存不是无限大的，如果要计算或者处理一些比较大的数时，需要开辟比较大的内存空间，于是就要对计算机进行数据类型的分类，分出多种数据类型来适合各种不同的计算条件差异。\n\n在c语言中 数据类型可以分为两类：\n原子类型：不可以再分解的基本类型，例如整型，浮点型，字符型等\n结构类型：由若干个类型的组合而成，是可以再分解的，例如整型数组是由若干整型数据组成的。\n\n\n算法\n \n算法是解决特定问题的求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或者多个操作。\n算法是具有五个基本特征：输入、输出、有穷性、确定性、和可行性。\n输出：算法至少有一个或者多给输出。\n有穷性：指算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。\n确定性：算法的每一个步骤都具有确定的含义，不会出现二义性。\n可行性：算法的每一步都必须是可行的，也就是说，每一步都能够通过执行有限次数完成。\n正确性：算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。\n高级语言编写的程序在计算机运时所消耗的时间取决于下列因素：\n\n1.算法采用的策略，方案。\n2.编译产生的代码质量。\n3.问题的输入模式。\n4.机器执行指令的速度。\n\n我们可以想象，线性表有两种物理存储结构：顺序存储结构和链式存储结构。\n\n线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。\n\n顺序存储结构封装需要三个属性：\n\n存储空间的起始位置：数组data，它的存储位置就是线性表存储空间的存储位置。\n线性表的最大存储容量：数组的长度MaxSize。\n线性表的当前长度：length。\n","tags":["life"]}]